use std::str::FromStr;

use solana_client::{rpc_client::{GetConfirmedSignaturesForAddress2Config, RpcClient}, rpc_config::RpcSignaturesForAddressConfig};
use solana_sdk::{commitment_config::CommitmentConfig, pubkey::Pubkey, signature::Signature, stake::state::StakeStateV2};
use solana_transaction_status::UiTransactionEncoding;
use anyhow::{anyhow, Result};


pub async fn get_balance(public_key: &str) -> Result<u64> {
    // Solana RPC endpoint (Devnet or Mainnet)
    let rpc_url = "https://api.mainnet-beta.solana.com";
    let client = RpcClient::new(rpc_url.to_string());

    // Convert the public key to a Solana Pubkey
    let pubkey = Pubkey::from_str(public_key).map_err(|e| anyhow::anyhow!("Invalid public key: {}", e))?;

    // Fetch the account balance
    let balance = client
        .get_balance(&pubkey)
        .map_err(|e| anyhow::anyhow!("Failed to fetch balance: {}", e))?;

    Ok(balance)
}

pub async fn get_staked_balance(public_key: &str) -> anyhow::Result<u64> {
    // Solana RPC endpoint
    let rpc_url = "https://api.mainnet-beta.solana.com";
    let client = RpcClient::new(rpc_url.to_string());

    // Public key of the delegator
    let pubkey = Pubkey::from_str(public_key)?;

    // Solana Stake Program ID
    let stake_program_id = Pubkey::from_str("Stake11111111111111111111111111111111111111")?;

    // Get all stake accounts for the program
    let accounts = client
        .get_program_accounts(&stake_program_id)?
        .into_iter()
        .filter_map(|(account_pubkey, account_data)| {
            // Deserialize account data into StakeStateV2
            match bincode::deserialize::<StakeStateV2>(&account_data.data) {
                Ok(stake_state) => Some((account_pubkey, stake_state)),
                Err(_) => None,
            }
        })
        .collect::<Vec<_>>();

    // Filter accounts that belong to the given public key
    let delegated_stake: u64 = accounts
        .iter()
        .filter_map(|(_, stake_state)| match stake_state {
            StakeStateV2::Stake(meta, stake, _) if meta.authorized.staker == pubkey => {
                Some(stake.delegation.stake)
            }
            _ => None,
        })
        .sum();

    Ok(delegated_stake)
}

pub async fn get_latest_transaction(public_key: &str) -> Result<Option<serde_json::Value>> {
    // Solana RPC endpoint
    let rpc_url = "https://api.mainnet-beta.solana.com";
    let client = RpcClient::new(rpc_url.to_string());

    // Convert the public key to a Solana Pubkey
    let pubkey = Pubkey::from_str(public_key).map_err(|e| anyhow!("Invalid public key: {}", e))?;

    // Get recent transaction signatures for the public key
    let signatures = client
        .get_signatures_for_address(&pubkey)
        .map_err(|e| anyhow!("Failed to fetch transaction signatures: {}", e))?;

    // Get the most recent signature (if any exist)
    if let Some(signature_str) = signatures.get(0) {
        // Convert the signature string to a Signature type
        let signature = Signature::from_str(&signature_str.signature)
            .map_err(|e| anyhow!("Invalid signature: {}", e))?;

        // Fetch the transaction details
        let transaction = client
            .get_transaction(&signature, UiTransactionEncoding::Json)
            .map_err(|e| anyhow!("Failed to fetch transaction details: {}", e))?;

        // Return the transaction as a JSON object
        Ok(Some(serde_json::to_value(transaction)?))
    } else {
        // No transactions found for the public key
        Ok(None)
    }
}

pub async fn get_transaction_history(public_key: &str, limit: usize) -> Result<Vec<serde_json::Value>> {
    // Solana RPC endpoint (Mainnet)
    let rpc_url = "https://api.mainnet-beta.solana.com";
    let client = RpcClient::new(rpc_url.to_string());

    // Convert the public key to a Solana Pubkey
    let pubkey = solana_sdk::pubkey::Pubkey::from_str(public_key)
        .map_err(|e| anyhow!("Invalid public key: {}", e))?;

    // Fetch transaction signatures for the public key
    let signatures = client
        .get_signatures_for_address_with_config(
            &pubkey,
            GetConfirmedSignaturesForAddress2Config {
                limit: Some(limit),
                before: None,
                until: None,
                commitment: Some(CommitmentConfig::finalized()),
            },
        )
        .map_err(|e| anyhow!("Failed to fetch signatures: {}", e))?;

    if signatures.is_empty() {
        return Ok(vec![]); // No transactions found
    }

    // Fetch details for each transaction signature
    let mut transactions = Vec::new();

    for signature_info in signatures.iter() {
        let signature = Signature::from_str(&signature_info.signature)
            .map_err(|e| anyhow!("Invalid signature: {}", e))?;

        // Fetch transaction details with maxSupportedTransactionVersion
        let transaction = client
        .get_transaction_with_config(
            &signature,
            solana_client::rpc_config::RpcTransactionConfig {
                encoding: Some(UiTransactionEncoding::Json),
                max_supported_transaction_version: Some(0),
                commitment: Some(CommitmentConfig::finalized()),
            },
        )
        .map_err(|e| anyhow!("Failed to fetch transaction: {}", e))?;

        let json_value = serde_json::to_value(transaction)
            .map_err(|e| anyhow!("Failed to serialize transaction: {}", e))?;
        transactions.push(json_value);
    }

    Ok(transactions)
}

